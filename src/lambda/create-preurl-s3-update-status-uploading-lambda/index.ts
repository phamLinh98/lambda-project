// import { getInstanceDynamoDB } from "../../db/config";
// import { updateTableInDynamoDB } from "../create-update-detele-search-dynamo-sqs-s3/connectAndUpdateDynamoDb";
// import { getSecretOfKey } from "../get-secret-key-from-manager";
// import {
//   connectToS3Bucket,
//   createPreUrlUpdateS3,
// } from "../create-update-detele-search-dynamo-sqs-s3/connectAndUpdateS3";

// LocalStack
// import { getSecretOfKey } from "../../../localstack/mock-secret-key";
// import { connectToS3Bucket } from '../../../localstack/mock-s3';
// import { getInstanceDynamoDB, updateTableInDynamoDB } from "../../../localstack/mock-dynamo-db";
import { getInstanceDynamoDB } from "../../../mock-aws/mock-db";
import { connectToS3Bucket } from "../../../mock-aws/mock-s3";
import { getSecretOfKey } from "../../../mock-aws/mock-secret";
import { updateTableInDynamoDB } from "../create-update-detele-search-dynamo-sqs-s3/connectAndUpdateDynamoDb";
import { createPreUrlUpdateS3 } from "../create-update-detele-search-dynamo-sqs-s3/connectAndUpdateS3";

export const handler = async (event: any) => {
  try {
    console.log("üîç Check/find error point 1");
    console.log("event", event);
    // 4.1 L·∫•y bucketName bucketCsvName
    const bucketName = (await getSecretOfKey("bucketCsvName")) as any;

    // 4.2 L·∫•y t√™n b·∫£ng uploadCsvTableName
    const uploadCsvTable = (await getSecretOfKey("uploadCsvTableName")) as any;
    console.log("üîç Check/find error point 2");
    const s3Client = await connectToS3Bucket();
    const dynamoDB = await getInstanceDynamoDB();

    console.log("BEBUG #22556(1):");
    // 4.3 T·∫°o h√†m generateUUID ƒë·ªÉ t·∫°o ra m·ªôt UUID duy nh·∫•t
    const generateUUID = () => {
      console.log("BEBUG #22556(2):");
      const result = "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(
        /[xy]/g,
        function (c) {
          console.log("BEBUG #22556(2.1):", c);
          const r = (Math.random() * 16) | 0;
          console.log("BEBUG #22556(2.2):", r);
          const v = c === "x" ? r : (r & 0x3) | 0x8;
          console.log("BEBUG #22556(2.3):", v);
          return v.toString(16);
        }
      );
      console.log("BEBUG #22556(2.4):", result);
      return result;
    };

    // 4.4 T·∫°o t√™n t·ªáp b·∫±ng UUID v·ªõi h√†m generateUUID
    const fileName = generateUUID();
    console.log("BEBUG #22556(3):", fileName);

    console.log("üîç Check/find error point 3");

    // 4.5 C·∫≠p nh·∫≠t tr·∫°ng th√°i c·ªßa b·∫£ng DynamoDB th√†nh "Uploading"
    await updateTableInDynamoDB(
      dynamoDB,
      uploadCsvTable,
      fileName,
      "Uploading"
    );

    // 4.6 T·∫°o t√™n t·ªáp CSV ƒë·ªÉ l∆∞u v√†o S3 bucket v·ªõi format "csv/{fileName}.csv"
    const nameCsvSaveIntoS3Bucket = "csv/" + fileName + ".csv";

    // 4.7 ƒê·∫∑t th·ªùi gian h·∫øt h·∫°n c·ªßa URL ƒë√£ k√Ω l√† 3600 gi√¢y (1 gi·ªù)
    const timeExpired = 3600;

    // 4.8 T·∫°o Pre-signed URL ƒë·ªÉ c·∫≠p nh·∫≠t t·ªáp CSV v√†o S3 bucket
    console.log("üîç Check/find error point 4");
    const data = await createPreUrlUpdateS3(
      s3Client,
      bucketName,
      nameCsvSaveIntoS3Bucket,
      timeExpired,
      fileName
    );

    console.log("üîç Check/find error point 5");
    // // 4.9 Tr·∫£ v·ªÅ Pre-signed URL ƒë√£ t·∫°o
    return data;
  } catch (error) {
    console.error("Call Lambda Fail");
    return {
      statusCode: 500,
      body: JSON.stringify({ message: "Call Lambda PreURL fail" }),
    };
  }
};
